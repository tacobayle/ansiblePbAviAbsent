---
- hosts: localhost
  connection: local
  gather_facts: no

  roles:
    - role: "avinetworks.avisdk"

  tasks:

    - name: Debug
      debug:
        msg: "{{ avi_credentials }}"
      tags:
        - debug

    - name: Get GSLB list
      avi_api_session:
        avi_credentials: "{{ avi_credentials | default(omit) }}"
        api_context: "{{ avi_api_context | default(omit) }}"
        http_method: get
        path: gslbservice
      register: gslbserviceResults
      ignore_errors: yes

    - name: Delete Glsb services - it may fails if not executed in the leader cluster
      avi_api_session:
        avi_credentials: "{{ avi_credentials | default(omit) }}"
        api_context: "{{ avi_api_context | default(omit) }}"
        http_method: "delete"
        path: '{{"gslbservice/" + item.uuid }}'
      ignore_errors: yes
      loop: "{{ gslbserviceResults.obj.results }}"

    - name: Get GSLB profile
      avi_api_session:
        avi_credentials: "{{ avi_credentials | default(omit) }}"
        api_context: "{{ avi_api_context | default(omit) }}"
        http_method: get
        path: gslbgeodbprofile
      register: gslbgeodbprofileResults
      ignore_errors: yes

    - name: Delete Glsb Geo profile - it may fails if not executed in the leader cluster
      avi_api_session:
        avi_credentials: "{{ avi_credentials | default(omit) }}"
        api_context: "{{ avi_api_context | default(omit) }}"
        http_method: "delete"
        path: '{{"gslbgeodbprofile/" + item.uuid }}'
      loop: "{{ gslbgeodbprofileResults.obj.results }}"
      ignore_errors: yes

    - name: Get GSLB config
      avi_api_session:
        avi_credentials: "{{ avi_credentials | default(omit) }}"
        api_context: "{{ avi_api_context | default(omit) }}"
        http_method: get
        path: gslb
      register: gslbResults
      ignore_errors: yes

    - name: Delete Glsb config - it may fails if not executed in the leader cluster
      avi_api_session:
        avi_credentials: "{{ avi_credentials | default(omit) }}"
        api_context: "{{ avi_api_context | default(omit) }}"
        http_method: "delete"
        path: '{{"gslb/" + item.uuid }}'
      loop: "{{ gslbResults.obj.results }}"
      ignore_errors: yes

    - name: get DNS VS used by system
      avi_api_session:
        avi_credentials: "{{ avi_credentials | default(omit) }}"
        api_context: "{{ avi_api_context | default(omit) }}"
        http_method: get
        timeout: 300
        path: systemconfiguration
      register: systemconfigurationOutput
      ignore_errors: yes

    - name: Delete DNS VS used by system in systemconfiguration
      avi_api_session:
        avi_credentials: "{{ avi_credentials | default(omit) }}"
        api_context: "{{ avi_api_context | default(omit) }}"
        http_method: patch
        timeout: 300
        path: systemconfiguration
        data: {"delete":{"dns_virtualservice_refs":["{{ item }}"]}}
      loop: "{{ systemconfigurationOutput.obj.dns_virtualservice_refs }}"
      when: systemconfigurationOutput.obj.dns_virtualservice_refs is defined
      ignore_errors: yes

    - name: get VS
      avi_api_session:
        avi_credentials: "{{ avi_credentials | default(omit) }}"
        api_context: "{{ avi_api_context | default(omit) }}"
        http_method: get
        timeout: 300
        path: virtualservice
      register: virtualserviceResults
      ignore_errors: yes

    - name: Delete vs config
      avi_api_session:
        avi_credentials: "{{ avi_credentials | default(omit) }}"
        api_context: "{{ avi_api_context | default(omit) }}"
        http_method: "delete"
        path: '{{"virtualservice/" + item.uuid }}'
      loop: "{{ virtualserviceResults.obj.results }}"
      loop_control:
        label: "{{ item.name }}"
      ignore_errors: yes

    - name: get vsvip
      avi_api_session:
        avi_credentials: "{{ avi_credentials | default(omit) }}"
        api_context: "{{ avi_api_context | default(omit) }}"
        http_method: get
        timeout: 300
        path: vsvip
      register: vsvipResults
      ignore_errors: yes

    - name: Delete vsvip config
      avi_api_session:
        avi_credentials: "{{ avi_credentials | default(omit) }}"
        api_context: "{{ avi_api_context | default(omit) }}"
        http_method: "delete"
        path: '{{"vsvip/" + item.uuid }}'
      loop: "{{ vsvipResults.obj.results }}"
      loop_control:
        label: "{{ item.name }}"
      ignore_errors: yes

    - name: get http policies
      avi_api_session:
        avi_credentials: "{{ avi_credentials | default(omit) }}"
        api_context: "{{ avi_api_context | default(omit) }}"
        http_method: get
        timeout: 300
        path: httppolicyset
      register: httppolicysetResults
      ignore_errors: yes

    - name: Delete http policies
      avi_api_session:
        avi_credentials: "{{ avi_credentials | default(omit) }}"
        api_context: "{{ avi_api_context | default(omit) }}"
        http_method: "delete"
        path: '{{"httppolicyset/" + item.uuid }}'
      loop: "{{ httppolicysetResults.obj.results }}"
      loop_control:
        label: "{{ item.name }}"
      ignore_errors: yes

    - name: get pools
      avi_api_session:
        avi_credentials: "{{ avi_credentials | default(omit) }}"
        api_context: "{{ avi_api_context | default(omit) }}"
        http_method: get
        timeout: 300
        path: pool
      register: poolResults
      ignore_errors: yes

    - name: Delete pool config
      avi_api_session:
        avi_credentials: "{{ avi_credentials | default(omit) }}"
        api_context: "{{ avi_api_context | default(omit) }}"
        http_method: "delete"
        path: '{{"pool/" + item.uuid }}'
      loop: "{{ poolResults.obj.results }}"
      loop_control:
        label: "{{ item.name }}"
      ignore_errors: yes

    - name: Get SE list
      avi_api_session:
        avi_credentials: "{{ avi_credentials | default(omit) }}"
        api_context: "{{ avi_api_context | default(omit) }}"
        http_method: get
        path: serviceengine
      register: serviceengineResults
      ignore_errors: yes

    - name: Delete SE
      avi_api_session:
        avi_credentials: "{{ avi_credentials | default(omit) }}"
        api_context: "{{ avi_api_context | default(omit) }}"
        http_method: "delete"
        path: '{{"serviceengine/" + item.uuid }}'
      loop: "{{ serviceengineResults.obj.results }}"
      loop_control:
        label: "{{ item.name }}"
      ignore_errors: yes

    - name: Pausing for 120 seconds
      pause:
        minutes: 2

    - name: Get SE group list
      avi_api_session:
        avi_credentials: "{{ avi_credentials | default(omit) }}"
        api_context: "{{ avi_api_context | default(omit) }}"
        http_method: get
        path: serviceenginegroup
      register: serviceenginegroupResults
      ignore_errors: yes

    - name: Delete SE Groups
      avi_api_session:
        avi_credentials: "{{ avi_credentials | default(omit) }}"
        api_context: "{{ avi_api_context | default(omit) }}"
        http_method: "delete"
        path: '{{"serviceenginegroup/" + item.uuid }}'
      loop: "{{ serviceenginegroupResults.obj.results }}"
      loop_control:
        label: "{{ item.name }}"
      when: item.name != "Default-Group"
      ignore_errors: yes

    - name: Get Ipam list
      avi_api_session:
        avi_credentials: "{{ avi_credentials | default(omit) }}"
        api_context: "{{ avi_api_context | default(omit) }}"
        http_method: get
        path: ipamdnsproviderprofile
      register: ipamResults
      ignore_errors: yes

    - name: Remove Networks for each IPAM
      avi_api_session:
        avi_credentials: "{{ avi_credentials | default(omit) }}"
        api_context: "{{ avi_api_context | default(omit) }}"
        http_method: put
        timeout: 300
        path: ipamdnsproviderprofile
        data: {"name": "{{ item.name }}", "internal_profile": {"usable_networks": [] }}
      loop: "{{ ipamResults.obj.results }}"
      loop_control:
        label: "{{ item.name }}"
      when: item.type == "IPAMDNS_TYPE_INTERNAL"
      ignore_errors: yes

    - name: Discover remaining configured networks
      avi_api_session:
        avi_credentials: "{{ avi_credentials | default(omit) }}"
        api_context: "{{ avi_api_context | default(omit) }}"
        http_method: "get"
        path: network
      register: networksResults
      ignore_errors: yes

    - name: Delete configured networks
      avi_api_session:
        avi_credentials: "{{ avi_credentials | default(omit) }}"
        api_context: "{{ avi_api_context | default(omit) }}"
        http_method: "delete"
        path: '{{"network/" + item.uuid }}'
      loop: "{{ networksResults.obj.results }}"
      loop_control:
        label: "{{ item.name }}"
      ignore_errors: yes

    - name: Pausing for 20 seconds
      pause:
        seconds: 20

    - name: Get Clouds list
      avi_api_session:
        avi_credentials: "{{ avi_credentials | default(omit) }}"
        api_context: "{{ avi_api_context | default(omit) }}"
        http_method: get
        path: cloud
      register: cloudResults
      ignore_errors: yes

    - name: Revert cloud to No Access (for vmw)
      avi_cloud:
        avi_credentials: "{{ avi_credentials | default(omit) }}"
        api_context: "{{ avi_api_context | default(omit) }}"
        name: "{{ item.name }}"
        vtype: CLOUD_NONE
      loop: "{{ cloudResults.obj.results }}"
      loop_control:
        label: "{{ item.name }}"
      when:
        - item.vtype == "CLOUD_VCENTER"
      ignore_errors: yes

    - name: Get Vcenter server - NSXT
      avi_api_session:
        avi_credentials: "{{ avi_credentials | default(omit) }}"
        api_context: "{{ avi_api_context | default(omit) }}"
        http_method: get
        path: vcenterserver
      register: vcenter_servers

    - name: Delete Vcenter server - NSXT
      avi_api_session:
        avi_credentials: "{{ avi_credentials | default(omit) }}"
        api_context: "{{ avi_api_context | default(omit) }}"
        http_method: "delete"
        path: '{{"vcenterserver/" + item.uuid }}'
      loop: "{{ vcenter_servers.obj.results }}"
      loop_control:
        label: "{{ item.name }}"
      ignore_errors: yes

    - name: Pausing for 10 seconds
      pause:
        seconds: 10
      ignore_errors: yes

    - name: Discover remaining configured networks
      avi_api_session:
        avi_credentials: "{{ avi_credentials | default(omit) }}"
        api_context: "{{ avi_api_context | default(omit) }}"
        http_method: "get"
        path: network
      register: networksResults
      ignore_errors: yes

    - name: Delete configured networks
      avi_api_session:
        avi_credentials: "{{ avi_credentials | default(omit) }}"
        api_context: "{{ avi_api_context | default(omit) }}"
        http_method: "delete"
        path: '{{"network/" + item.uuid }}'
      loop: "{{ networksResults.obj.results }}"
      loop_control:
        label: "{{ item.name }}"
      ignore_errors: yes

    - name: Delete clouds
      avi_api_session:
        avi_credentials: "{{ avi_credentials | default(omit) }}"
        api_context: "{{ avi_api_context | default(omit) }}"
        http_method: "delete"
        path: '{{"cloud/" + item.uuid }}'
      loop: "{{ cloudResults.obj.results }}"
      loop_control:
        label: "{{ item.name }}"
      when: item.name != "Default-Cloud"
      ignore_errors: yes

    - name: Delete IPAM and DNS Profile
      avi_api_session:
        avi_credentials: "{{ avi_credentials | default(omit) }}"
        api_context: "{{ avi_api_context | default(omit) }}"
        http_method: "delete"
        path: '{{"ipamdnsproviderprofile/" + item.uuid }}'
      loop: "{{ ipamResults.obj.results }}"
      loop_control:
        label: "{{ item.name }}"
      ignore_errors: yes